version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-bankingdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-notificationdb}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - banking-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Discovery
  eureka-server:
    image: ${DOCKER_REGISTRY:-banking}/service-registry:${TAG:-latest}
    container_name: eureka-server
    restart: always
    ports:
      - "8761:8761"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  user-service:
    image: ${DOCKER_REGISTRY:-banking}/user-service:${TAG:-latest}
    container_name: user-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=userdb
      - DB_USERNAME=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-should-be-at-least-256-bits-long}
      - SERVER_PORT=8085
    depends_on:
      - postgres
      - eureka-server
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  account-service:
    image: ${DOCKER_REGISTRY:-banking}/account-service:${TAG:-latest}
    container_name: account-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=accountdb
      - DB_USERNAME=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - RABBITMQ_HOST=rabbitmq
      - SERVER_PORT=8082
    depends_on:
      - postgres
      - eureka-server
      - rabbitmq
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  transaction-service:
    image: ${DOCKER_REGISTRY:-banking}/transaction-service:${TAG:-latest}
    container_name: transaction-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=transactiondb
      - DB_USERNAME=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - RABBITMQ_HOST=rabbitmq
      - SERVER_PORT=8083
    depends_on:
      - postgres
      - eureka-server
      - rabbitmq
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    image: ${DOCKER_REGISTRY:-banking}/notification-service:${TAG:-latest}
    container_name: notification-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=notificationdb
      - MONGO_USERNAME=${MONGO_USER:-admin}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-admin}
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - RABBITMQ_HOST=rabbitmq
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME:-your-email@gmail.com}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-your-app-password}
      - SERVER_PORT=8084
    depends_on:
      - mongodb
      - eureka-server
      - rabbitmq
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    image: ${DOCKER_REGISTRY:-banking}/auth-service:${TAG:-latest}
    container_name: auth-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=authdb
      - DB_USERNAME=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-should-be-at-least-256-bits-long}
      - SERVER_PORT=8081
    depends_on:
      - postgres
      - eureka-server
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    image: ${DOCKER_REGISTRY:-banking}/api-gateway:${TAG:-latest}
    container_name: api-gateway
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_URL=http://eureka-server:8761/eureka/
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-should-be-at-least-256-bits-long}
      - SERVER_PORT=8080
      - SSL_ENABLED=${SSL_ENABLED:-false}
      - SSL_KEY_STORE=${SSL_KEY_STORE:-classpath:keystore.p12}
      - SSL_KEY_STORE_PASSWORD=${SSL_KEY_STORE_PASSWORD:-password}
      - SSL_KEY_STORE_TYPE=${SSL_KEY_STORE_TYPE:-PKCS12}
      - SSL_KEY_ALIAS=${SSL_KEY_ALIAS:-tomcat}
    ports:
      - "443:8080"
    depends_on:
      - eureka-server
      - user-service
      - account-service
      - transaction-service
      - notification-service
      - auth-service
      - redis
    networks:
      - banking-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    restart: always
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    networks:
      - banking-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    restart: always
    volumes:
      - ./infrastructure/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - banking-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - banking-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  banking-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
